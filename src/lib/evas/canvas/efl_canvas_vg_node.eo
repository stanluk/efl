import eina_types;

abstract Efl.Canvas.Vg.Node extends Efl.Object implements Efl.Gfx.Entity, Efl.Gfx.Color, Efl.Gfx.Stack, Efl.Duplicate, Efl.Gfx.Path
{
   [[Efl vector graphics abstract class]]
   eo_prefix: efl_canvas_vg_node;
   legacy_prefix: evas_vg_node;
   methods {
      @property transformation {
         set {
            [[Sets the transformation matrix to be used for this node object.

              Note: Pass $null to cancel the applied transformation.

              @since 1.14]]
         }
         get {
            [[Gets the transformation matrix used for this node object.

              @since 1.14]]
         }
         values {
            @cref m: Eina.Matrix3; [[Transformation matrix.]]
         }
      }
      @property origin {
         set {
            [[Sets the origin position of the node object.

              This origin position affects node transformation.

              @since 1.14]]
         }
         get {
            [[Gets the origin position of the node object.

              @since 1.14]]
         }
         values {
            x: double; [[$origin x position.]]
            y: double; [[$origin y position.]]
         }
      }
      @property mask {
         [[Set Mask Node to this renderer]]
         set {
         }
         values {
            mask: Efl.Canvas.Vg.Node; [[Mask object]]
            op: int; [[Masking Option. Reserved]]
         }
      }
   }
   implements {
      Efl.Object.name { set; }
      Efl.Object.parent { set; }
      Efl.Object.constructor;
      Efl.Object.invalidate;
      Efl.Object.destructor;
      Efl.Gfx.Entity.visible { get; set; }
      Efl.Gfx.Color.color { get; set; }
      Efl.Gfx.Entity.size { get; }
      Efl.Gfx.Entity.position { get; set; }
      Efl.Gfx.Entity.geometry { get; }
      Efl.Gfx.Stack.below { get; }
      Efl.Gfx.Stack.above { get; }
      Efl.Gfx.Stack.stack_below;
      Efl.Gfx.Stack.stack_above;
      Efl.Gfx.Stack.move_to_top;
      Efl.Gfx.Stack.move_to_bottom;
      Efl.Gfx.Path.interpolate;
      Efl.Duplicate.duplicate;
   }
}
