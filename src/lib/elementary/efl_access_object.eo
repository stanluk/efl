import efl_access_types;

struct Efl.Access.Event.Handler; [[Accessibility event listener]]

struct Efl.Access.Event.State_Changed.Data
{
   [[Accessibility state changed event data]]
   type: Efl.Access.State_Type; [[Type of the state changed event]]
   new_value: bool; [[New value]]
}

struct Efl.Access.Event.Geometry_Changed.Data
{
   [[Accessibility geometry changed event data]]
   x: int; [[X coordinate]]
   y: int; [[Y coordinate]]
   width: int; [[Width]]
   height: int; [[Height]]
}

struct Efl.Access.Event.Children_Changed.Data
{
   [[Accessibility children changed event data]]
   is_added: bool; [[Child is added or not]]
   child: Efl.Object; [[Child object]]
}

mixin @beta Efl.Access.Object requires Efl.Object
{
   [[Accessibility accessible mixin]]
   eo_prefix: efl_access_object;
   data: Efl_Access_Object_Data;
   methods {
      @property localized_role_name @protected @beta {
         [[Gets an localized string describing accessible object role name.]]
         get {
         }
         values {
            localized_name: string; [[Localized accessible object role name]]
         }
      }
      @property i18n_name @beta {
         [[Accessible name of the object.]]
         get {
         }
         set {
         }
         values {
            i18n_name: string; [[Accessible name]]
         }
      }
      relations_get @protected @beta @const {
         [[Gets an all relations between accessible object and other accessible objects.]]
         return: iterator<ptr(Efl.Access.Relation)>; [[Accessible relation set]]
      }
      @property role @beta {
         [[The role of the object in accessibility domain.]]
         get {
         }
         set {
         }
         values {
            role: Efl.Access.Role; [[Accessible role]]
         }
      }
      @property access_children @protected @beta {
         [[Gets object's accessible children.]]
         get {
         }
         values {
            children: list<Efl.Access.Object> @owned; [[List of widget's children]]
         }
      }
      @property role_name @protected @beta {
         [[Gets human-readable string indentifying object accessibility role.]]
         get {
         }
         values {
            role_name: string; [[Accessible role name]]
         }
      }
      @property attributes @protected @beta {
         [[Gets key-value pairs indentifying object extra attributes. Must be free by a user.]]
         get {
         }
         values {
            attributes: list<ptr(Efl.Access.Attribute) @owned> @owned; [[List of object attributes, Must be freed by the user]]
         }
      }
      attribute_append {
         [[Add key-value pair identifying object extra attributes
         ]]
         params {
            @in key: string; [[The string key to give extra information]]
            @in value: string; [[The string value to give extra information]]
         }
      }
      attributes_clear {
         [[Removes all attributes in accessible object.]]
      }
      @property reading_info_type @protected {
         get {
            [[Gets reading information types of an accessible object.]]
         }
         set {
            [[Sets reading information of an accessible object.]]
         }
         values {
            reading_info: Efl.Access.Reading.Info.Type; [[Reading information types]]
         }
      }
      @property index_in_parent @protected @beta {
         [[Gets index of the child in parent's children list.]]
         get {
         }
         values {
            idx: int; [[Index in children list]]
         }
      }
      @property description @beta {
         [[Contextual information about object.]]
         get {
         }
         set {
         }
         values {
            description: string; [[Accessible contextual information]]
         }
      }
      @property state_set @protected @beta {
         [[Gets set describing object accessible states.]]
         get {
         }
         values {
            states: Efl.Access.State_Set; [[Accessible state set]]
         }
      }
      event_handler_add @class @protected @beta {
         [[Register accessibility event listener]]
         params {
              @in cb: Efl.Event_Cb; [[Callback]]
              @in data: void_ptr; [[Data]]
         }
         return: ptr(Efl.Access.Event.Handler); [[Event handler]]
      }
      event_handler_del @class @protected @beta {
         [[Deregister accessibility event listener]]
         params {
              @in handler: ptr(Efl.Access.Event.Handler); [[Event handler]]
         }
      }
      event_emit @class @protected @beta {
          [[Emit event]]
         params {
            @in accessible: Efl.Access.Object; [[Accessibility object.]]
            @cref event: Efl.Event_Description; [[Accessibility event type.]]
            @in event_info: void_ptr; [[Accessibility event details.]]
         }
      }
      @property translation_domain @beta {
         [[The translation domain of "name" and "description"
           properties.

           Translation domain should be set if the application wants to support i18n
           for accessibility "name" and "description" properties.

           When translation domain is set, values of "name" and "description"
           properties will be translated with the dgettext function using the
           current translation domain as the "domainname" parameter.

           It is the application developer's responsibility to ensure that
           translation files are loaded and bound to the translation domain
           when accessibility is enabled.]]
         get {
         }
         set {
         }
         values {
            domain: string; [[Translation domain]]
         }
      }
      relationship_append @beta {
         [[Defines the relationship between two accessible objects.

           Adds a unique relationship between source object and relation_object of a
           given type.

           Relationships can be queried by Assistive Technology clients to
           provide customized feedback, improving overall user experience.

           Relationship_append API is asymmetric, which means that
           appending, for example, relation EFL_ACCESS_RELATION_FLOWS_TO from object A to B,
           do NOT append relation EFL_ACCESS_RELATION_FLOWS_FROM from object B to
           object A.]]
         return: bool; [[$true if relationship was successfully appended, $false otherwise]]
         params {
            @in type: Efl.Access.Relation_Type; [[Relation type]]
            @in relation_object: const(Efl.Access.Object); [[Object to relate to]]
         }
      }
      relationship_remove @beta {
         [[Removes the relationship between two accessible objects.

          If relation_object is NULL function removes all relations
          of the given type.
         ]]
         params {
            @in type: Efl.Access.Relation_Type; [[Relation type]]
            @in relation_object: const(Efl.Access.Object); [[Object to remove relation from]]
         }
      }
      relationships_clear @beta {
         [[Removes all relationships in accessible object.]]
      }
      @property access_root @class @beta {
         get {
            [[Get root object of accessible object hierarchy]]
            values {
               ret: Efl.Object; [[Root object]]
            }
         }
      }
   }
   implements {
      Efl.Object.destructor;
      Efl.Object.invalidate;
      Efl.Object.provider_find;
   }
   events {
      property,changed: string; [[Called when property has changed]]
      children,changed: Efl.Access.Event.Children_Changed.Data; [[Called when children have changed]]
      state,changed: Efl.Access.Event.State_Changed.Data; [[Called when state has changed]]
      bounds,changed: Efl.Access.Event.Geometry_Changed.Data; [[Called when boundaries have changed]]
      visible,data,changed: void; [[Called when visibility has changed]]
      active,descendant,changed: Efl.Object; [[Called when active state of descendant has changed]]
      added: void; [[Called when item is added]]
      removed: void; [[Called when item is removed]]
   }
}
